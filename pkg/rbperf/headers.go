// Copyright 2023 The Parca Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rbperf

// Code generated by 'ccgo bpf/cpu/rbperf.h -o lol.go', DO NOT EDIT.

import (
	"math"
	"reflect"
	"sync/atomic"
	"unsafe"

	"modernc.org/libc"
	"modernc.org/libc/sys/types"
)

var _ = math.Pi
var _ reflect.Kind
var _ atomic.Value
var _ unsafe.Pointer
var _ *libc.TLS
var _ types.Size_t

const ( /* rbperf.h:74:1: */
	STACK_COMPLETE   = 0
	STACK_INCOMPLETE = 1
)

const ( /* rbperf.h:79:1: */
	RBPERF_EVENT_UNKNOWN         = 0
	RBPERF_EVENT_ON_CPU_SAMPLING = 1
	RBPERF_EVENT_SYSCALL         = 2
)

type ptrdiff_t = int64 /* <builtin>:3:26 */

type size_t = uint64 /* <builtin>:9:23 */

type wchar_t = int32 /* <builtin>:15:24 */

type s8 = int8    /* rbperf.h:15:14 */
type u8 = uint8   /* rbperf.h:16:14 */
type s16 = int16  /* rbperf.h:17:15 */
type u16 = uint16 /* rbperf.h:18:15 */
type s32 = int32  /* rbperf.h:19:15 */
type u32 = uint32 /* rbperf.h:20:15 */
type s64 = int64  /* rbperf.h:21:15 */
type u64 = uint64 /* rbperf.h:22:15 */

type RubyFrame = struct {
	lineno      u32
	method_name [50]int8
	path        [150]int8
} /* rbperf.h:89:3 */

type RubyStack = struct {
	timestamp     u64
	frames        [750]u32
	pid           u32
	cpu           u32
	syscall_id    int32
	_             [4]byte
	size          int64
	expected_size int64
	comm          [25]int8
	_             [3]byte
	stack_status  uint32
} /* rbperf.h:102:3 */

type SampleState = struct {
	stack                    RubyStack
	base_stack               u64
	cfp                      u64
	ruby_stack_program_count int32
	rb_version               int32
} /* rbperf.h:110:3 */

type ProcessData = struct {
	rb_frame_addr u64
	rb_version    u32
	_             [4]byte
	start_time    u64
} /* rbperf.h:116:3 */

type RubyVersionOffsets = struct {
	major_version          int32
	minor_version          int32
	patch_version          int32
	vm_offset              int32
	vm_size_offset         int32
	control_frame_t_sizeof int32
	cfp_offset             int32
	label_offset           int32
	path_flavour           int32
	line_info_size_offset  int32
	line_info_table_offset int32
	lineno_offset          int32
	main_thread_offset     int32
	ec_offset              int32
} /* rbperf.h:133:3 */
